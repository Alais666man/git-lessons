# Однострочный комментарии

'''
Многострочные комментарии
'''

"""
Многострочный комментарий
"""

# 1. Как объявить переменную
'''Переменная -поименнованная область
оперативной памяти в которую можно
записать даные и из которой можно прочитать

Зависимость от регистра
PEP-8 - договорённость об оформлении кода python
в питоне нет констант
'''

username = 'root' # присвоить имя переменной
print(username) # считывание значение переменной и вывод на экран (print)

username = 'toor' # присвоить новое значение
print(username)




# Какие типы данных существуют в python?
"""
Тип данных переменной является  её характеристикой 
и описывает следующее:
- Количество памяти
- Диапазон допустимых значений
- Допустимые операции над переменной
- Формат отображения (для человека)


1. Простые или скалярные типы данных - в один момент времени может
 хранить только одно значение
 	- int - целое число
 	- float - число с плавающей точкой (дробь)
 	- bool - догическое значение (true false)
 	- complex - комплексное число
 	- str - строка
 	- bytes - только Pthon3 байтовая строка
2. Сложные (составные, структурные) типы данных - в один момент
времени хранят любое количество значений любого типа
	- tuple - кортеж
	- list - список
	- set - множество
	- dict - словарь
	- object - объект
3. Специальные типы данных
	- None - пустота, отсутствие значения (именно с большой буквы)

"""


a = None # В питоне переменная декларируется и сразу инициилизируется

# bool  - логическое значение
flag1 = True
flag2 = False #True/False Именно с больших букв 

# Целые числа
i1 = 666
i2 = 0b10101 # Двоичная система
i3 = 0o755 # Восьмиричная
i4 = 0xaf # Шестнадцатиричная (Регистр не важен)


# float
f1 = 1.23 # Только через точку. Запятая - спец. символ
f2 = 1e-3 # 0.001 дробное число
f3 = 1e6 # 1000000.0 (10 в шестой степени)

#  complex
c1 = 3.14j

# str

s1 = 'string'
s2 = "str\"ing" # \ - символ экранирования
s3 = '''Много"
	стр'очная 
	строка
	'''
	#Формат сохраняется


s5  = r'^\d+$' # Сырая строка (питон не будет выполнять авто экранирования ) (raw)
s6 = u'Unicode in Python 2' # u - модификатор unit кода из python2


# bytes
s7 = b'Hello' 
'''
 b - модификатор байтовый строк. 
Строка без кодировки(набор байтов)

'''	


#tuple   (кортеж)

t1 = (1, 1.5, True, 'string', (1,2,3))  #Разделитель кортежа - ','
print(t1[3]) #Индексы генерируются автоматически от нуля 
t2 = (546,)


#list (списки)

l1 = [(1,), [2] 'string']    #Всё так же как и в кортеже, но с квадратными скобками '[]'
print(l1[0]) #=> (1,)
print(l1[0][0]) #=> 1
l1[0] = False   # => False    # Список можно изменять, добавлять\удалять

# set - множества
s1 ={1, 1, 2, 2, 3, 3} #Элементы не индексируются, к ним нельзя обратится. Все элементы всегда уникальны {1,1,1,}=>{1}
s2 = set() # Пустое множество

# dict - словари (Можно использовать обЪявленные переменные)
d1 = {
    'id': 1,
    'name': 'Linus'
    'is_developer': True,
    'slills': ('C++', 'Linux')
    'adress': {
    
} 

print(d1['id'])  # => 1
print(d1['name']) # => Linus
print(d1['adress']['street'])
d1['ant'] = 123 # Присвоение значения


# Как определить тип данных переменной?
print(type(d1)) # Вывод - тип данных переменной


# Как выполнить явное приведение переменной к типу?
i = '666' # тип - строка 
i = int (i)
print(i, type(i)) # 666, int (из строки в целочисленное)


# Типы данных бывают изменяемые и неизменяемые
# immutable - неизменяемые (все скалярные и кортеж)
# - bool, int , float, str, complex, bytes, tuple
# mutable (изменяемые) (все структурные кроме кортежа)
# - list, dict, set, object


# Какие операторы существуют в python?

'''
Арифметические: +, -, /, ,*, %(остаток от деления), **(возведение в степень), //(целая часть от деления, только с целыми числами)
Сравнения:      ==(равно), !=, <>(не равно), >, <, <=, >= (всегда True False)
Присваивания:   =, +=, -=, *=, /=, %=, **=, //=
логическое:     and, or, not
Побитовые:      &    |   ~   ^   <<   >>
Принадлежности: in     
                not in   (True False) (По словарю работает максимально быстро)
Тождественности:is     
                not is   (True False)
'''

# Ветвление
a = 1
b = 2
if  a < b:
    print('a < b')          #: - Начало блока кода. Истинный блок обязателен, elif - сколько угодно, else - только один
elif a == b:
    print('a = b')
elif a is b:
    pass # Пустая инструкция пустой блок кода
else:
    print('a > b')
    
# Тернарный операторы

if True:
    username = 'Вася'
else:
    username = 'Петя'
    
username = 'Вася' if True else 'Петя'  # тернарный оператор (Использовать когда одна простая инструкция)
    

    
#  Циклы
i = 0

while i:
    if i % 2: # Пропуск всех чётных
        continue  # пропускает одну итерацию (Использование не желательно)
        print(i)
        
    if i == 10:
        break # мгновенное завершение цикла
    i -= 1
    

lst = [1, 2, 3]    
for i in lst:   # Любое перебираемое значение
    print('Элемент списка:', i)
    
for key, value in enumerate(range(10, 15, 2)): # () - (start,end,шаг)  
    print(key, value)                          # enumerate - пронумировка

for key, value in d1.items():  # Перебор словарей
    print(key, value)
    
    
    
# Срезы

s = 'Hello, Python!'
s[0:5]  #С начального по 4-й. Начальное должно быть больше конечного ([:5] [7:] [::2] - c шагом)


l = list(range(10)) - # построение списка
l[::-1] # список наооборт
l2 = l[::] # срезать копию списка
# в результате среза списка всегда получается новый список




""""
Функции и методы списков
len(l) - длина списка
l.append(e) - добавить элемент в конец списка
l.insert(index, e) - добавить элемент в указанную позицию (элемент в позиции подвинется)
""""

s = []
for c in range(ord('a'), ord('z') + 1):
s.append(chr(c))
print(''.join(s))

input() # Ввод данных с клавиатуры



